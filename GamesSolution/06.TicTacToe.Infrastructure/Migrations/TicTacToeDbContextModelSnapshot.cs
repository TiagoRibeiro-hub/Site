// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using _06.TicTacToe.Infrastructure.Data;

#nullable disable

namespace _06.TicTacToe.Infrastructure.Migrations
{
    [DbContext(typeof(TicTacToeDbContext))]
    partial class TicTacToeDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("_00.Data._Entities.GameEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("DateTimeEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateTimeStart")
                        .HasColumnType("datetime2");

                    b.Property<string>("Difficulty")
                        .HasColumnType("nvarchar(20)");

                    b.Property<bool>("IsComputer")
                        .HasColumnType("bit");

                    b.Property<string>("Player1_Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Player2_Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("StartFirst")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Game", (string)null);
                });

            modelBuilder.Entity("_00.Data._Entities.MovesEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("DateTimeMove")
                        .HasColumnType("datetime2");

                    b.Property<int>("GameId")
                        .HasColumnType("int");

                    b.Property<string>("MoveFrom")
                        .HasColumnType("nvarchar(15)");

                    b.Property<int>("MoveNumber")
                        .HasColumnType("int");

                    b.Property<string>("MoveTo")
                        .IsRequired()
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("PlayerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.ToTable("Moves", (string)null);
                });

            modelBuilder.Entity("_00.Data._Entities.ScoresTableEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("PlayerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("PlayerName");

                    b.ToTable("ScoresTable", (string)null);
                });

            modelBuilder.Entity("_00.Data._Entities.TotalGamesEasyEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Losses")
                        .HasColumnType("int");

                    b.Property<int>("StartFirst")
                        .HasColumnType("int");

                    b.Property<int>("StartSecond")
                        .HasColumnType("int");

                    b.Property<int>("Ties")
                        .HasColumnType("int");

                    b.Property<int>("TotalGames")
                        .HasColumnType("int");

                    b.Property<int>("TotalGamesVsComputerId")
                        .HasColumnType("int");

                    b.Property<int>("Victories")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TotalGamesVsComputerId")
                        .IsUnique();

                    b.ToTable("TotalGamesEasy", (string)null);
                });

            modelBuilder.Entity("_00.Data._Entities.TotalGamesHardEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Losses")
                        .HasColumnType("int");

                    b.Property<int>("StartFirst")
                        .HasColumnType("int");

                    b.Property<int>("StartSecond")
                        .HasColumnType("int");

                    b.Property<int>("Ties")
                        .HasColumnType("int");

                    b.Property<int>("TotalGames")
                        .HasColumnType("int");

                    b.Property<int>("TotalGamesVsComputerId")
                        .HasColumnType("int");

                    b.Property<int>("Victories")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TotalGamesVsComputerId")
                        .IsUnique();

                    b.ToTable("TotalGamesHard", (string)null);
                });

            modelBuilder.Entity("_00.Data._Entities.TotalGamesIntermediateEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Losses")
                        .HasColumnType("int");

                    b.Property<int>("StartFirst")
                        .HasColumnType("int");

                    b.Property<int>("StartSecond")
                        .HasColumnType("int");

                    b.Property<int>("Ties")
                        .HasColumnType("int");

                    b.Property<int>("TotalGames")
                        .HasColumnType("int");

                    b.Property<int>("TotalGamesVsComputerId")
                        .HasColumnType("int");

                    b.Property<int>("Victories")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TotalGamesVsComputerId")
                        .IsUnique();

                    b.ToTable("TotalGamesIntermediate", (string)null);
                });

            modelBuilder.Entity("_00.Data._Entities.TotalGamesVsComputerEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ScoreTableId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ScoreTableId")
                        .IsUnique();

                    b.ToTable("TotalGamesVsComputer", (string)null);
                });

            modelBuilder.Entity("_00.Data._Entities.TotalGamesVsHumanEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Losses")
                        .HasColumnType("int");

                    b.Property<int>("ScoreTableId")
                        .HasColumnType("int");

                    b.Property<int>("StartFirst")
                        .HasColumnType("int");

                    b.Property<int>("StartSecond")
                        .HasColumnType("int");

                    b.Property<int>("Ties")
                        .HasColumnType("int");

                    b.Property<int>("TotalGames")
                        .HasColumnType("int");

                    b.Property<int>("Victories")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ScoreTableId")
                        .IsUnique();

                    b.ToTable("TotalGamesVsHuman", (string)null);
                });

            modelBuilder.Entity("_00.Data._Entities.MovesEntity", b =>
                {
                    b.HasOne("_00.Data._Entities.GameEntity", "Game")
                        .WithMany("Moves")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");
                });

            modelBuilder.Entity("_00.Data._Entities.TotalGamesEasyEntity", b =>
                {
                    b.HasOne("_00.Data._Entities.TotalGamesVsComputerEntity", "TotalGamesVsComputer")
                        .WithOne("TotalGamesEasy")
                        .HasForeignKey("_00.Data._Entities.TotalGamesEasyEntity", "TotalGamesVsComputerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TotalGamesVsComputer");
                });

            modelBuilder.Entity("_00.Data._Entities.TotalGamesHardEntity", b =>
                {
                    b.HasOne("_00.Data._Entities.TotalGamesVsComputerEntity", "TotalGamesVsComputer")
                        .WithOne("TotalGamesHard")
                        .HasForeignKey("_00.Data._Entities.TotalGamesHardEntity", "TotalGamesVsComputerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TotalGamesVsComputer");
                });

            modelBuilder.Entity("_00.Data._Entities.TotalGamesIntermediateEntity", b =>
                {
                    b.HasOne("_00.Data._Entities.TotalGamesVsComputerEntity", "TotalGamesVsComputer")
                        .WithOne("TotalGamesIntermediate")
                        .HasForeignKey("_00.Data._Entities.TotalGamesIntermediateEntity", "TotalGamesVsComputerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TotalGamesVsComputer");
                });

            modelBuilder.Entity("_00.Data._Entities.TotalGamesVsComputerEntity", b =>
                {
                    b.HasOne("_00.Data._Entities.ScoresTableEntity", "ScoresTable")
                        .WithOne("TotalGamesVsComputer")
                        .HasForeignKey("_00.Data._Entities.TotalGamesVsComputerEntity", "ScoreTableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ScoresTable");
                });

            modelBuilder.Entity("_00.Data._Entities.TotalGamesVsHumanEntity", b =>
                {
                    b.HasOne("_00.Data._Entities.ScoresTableEntity", "ScoresTable")
                        .WithOne("TotalGamesVsHuman")
                        .HasForeignKey("_00.Data._Entities.TotalGamesVsHumanEntity", "ScoreTableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ScoresTable");
                });

            modelBuilder.Entity("_00.Data._Entities.GameEntity", b =>
                {
                    b.Navigation("Moves");
                });

            modelBuilder.Entity("_00.Data._Entities.ScoresTableEntity", b =>
                {
                    b.Navigation("TotalGamesVsComputer")
                        .IsRequired();

                    b.Navigation("TotalGamesVsHuman")
                        .IsRequired();
                });

            modelBuilder.Entity("_00.Data._Entities.TotalGamesVsComputerEntity", b =>
                {
                    b.Navigation("TotalGamesEasy")
                        .IsRequired();

                    b.Navigation("TotalGamesHard")
                        .IsRequired();

                    b.Navigation("TotalGamesIntermediate")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
